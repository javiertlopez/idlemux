// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/javiertlopez/idlemux/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAssets creates a new instance of MockAssets. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssets(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssets {
	mock := &MockAssets{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssets is an autogenerated mock type for the Assets type
type MockAssets struct {
	mock.Mock
}

type MockAssets_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssets) EXPECT() *MockAssets_Expecter {
	return &MockAssets_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAssets
func (_mock *MockAssets) Create(ctx context.Context, source string, public bool) (model.Asset, error) {
	ret := _mock.Called(ctx, source, public)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (model.Asset, error)); ok {
		return returnFunc(ctx, source, public)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) model.Asset); ok {
		r0 = returnFunc(ctx, source, public)
	} else {
		r0 = ret.Get(0).(model.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, source, public)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAssets_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAssets_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - source
//   - public
func (_e *MockAssets_Expecter) Create(ctx interface{}, source interface{}, public interface{}) *MockAssets_Create_Call {
	return &MockAssets_Create_Call{Call: _e.mock.On("Create", ctx, source, public)}
}

func (_c *MockAssets_Create_Call) Run(run func(ctx context.Context, source string, public bool)) *MockAssets_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockAssets_Create_Call) Return(asset model.Asset, err error) *MockAssets_Create_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *MockAssets_Create_Call) RunAndReturn(run func(ctx context.Context, source string, public bool) (model.Asset, error)) *MockAssets_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockAssets
func (_mock *MockAssets) GetByID(ctx context.Context, id string) (model.Asset, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (model.Asset, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) model.Asset); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAssets_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAssets_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockAssets_Expecter) GetByID(ctx interface{}, id interface{}) *MockAssets_GetByID_Call {
	return &MockAssets_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAssets_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockAssets_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAssets_GetByID_Call) Return(asset model.Asset, err error) *MockAssets_GetByID_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *MockAssets_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (model.Asset, error)) *MockAssets_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVideos creates a new instance of MockVideos. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVideos(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVideos {
	mock := &MockVideos{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVideos is an autogenerated mock type for the Videos type
type MockVideos struct {
	mock.Mock
}

type MockVideos_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVideos) EXPECT() *MockVideos_Expecter {
	return &MockVideos_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockVideos
func (_mock *MockVideos) Create(ctx context.Context, anyVideo model.Video) (model.Video, error) {
	ret := _mock.Called(ctx, anyVideo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Video
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Video) (model.Video, error)); ok {
		return returnFunc(ctx, anyVideo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Video) model.Video); ok {
		r0 = returnFunc(ctx, anyVideo)
	} else {
		r0 = ret.Get(0).(model.Video)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Video) error); ok {
		r1 = returnFunc(ctx, anyVideo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVideos_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVideos_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - anyVideo
func (_e *MockVideos_Expecter) Create(ctx interface{}, anyVideo interface{}) *MockVideos_Create_Call {
	return &MockVideos_Create_Call{Call: _e.mock.On("Create", ctx, anyVideo)}
}

func (_c *MockVideos_Create_Call) Run(run func(ctx context.Context, anyVideo model.Video)) *MockVideos_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Video))
	})
	return _c
}

func (_c *MockVideos_Create_Call) Return(video model.Video, err error) *MockVideos_Create_Call {
	_c.Call.Return(video, err)
	return _c
}

func (_c *MockVideos_Create_Call) RunAndReturn(run func(ctx context.Context, anyVideo model.Video) (model.Video, error)) *MockVideos_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockVideos
func (_mock *MockVideos) GetByID(ctx context.Context, id string) (model.Video, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Video
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (model.Video, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) model.Video); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Video)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVideos_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockVideos_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockVideos_Expecter) GetByID(ctx interface{}, id interface{}) *MockVideos_GetByID_Call {
	return &MockVideos_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockVideos_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockVideos_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVideos_GetByID_Call) Return(video model.Video, err error) *MockVideos_GetByID_Call {
	_c.Call.Return(video, err)
	return _c
}

func (_c *MockVideos_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (model.Video, error)) *MockVideos_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockVideos
func (_mock *MockVideos) List(ctx context.Context, page int, limit int) ([]model.Video, error) {
	ret := _mock.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Video
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]model.Video, error)); ok {
		return returnFunc(ctx, page, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []model.Video); ok {
		r0 = returnFunc(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Video)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVideos_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockVideos_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - page
//   - limit
func (_e *MockVideos_Expecter) List(ctx interface{}, page interface{}, limit interface{}) *MockVideos_List_Call {
	return &MockVideos_List_Call{Call: _e.mock.On("List", ctx, page, limit)}
}

func (_c *MockVideos_List_Call) Run(run func(ctx context.Context, page int, limit int)) *MockVideos_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockVideos_List_Call) Return(videos []model.Video, err error) *MockVideos_List_Call {
	_c.Call.Return(videos, err)
	return _c
}

func (_c *MockVideos_List_Call) RunAndReturn(run func(ctx context.Context, page int, limit int) ([]model.Video, error)) *MockVideos_List_Call {
	_c.Call.Return(run)
	return _c
}
